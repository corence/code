
Mission
 - estimate duration and final location: estimateOutcome :: Mission -> World -> Thing -> (Interval, Thing)
 - isComplete? :: Mission -> World -> Thing -> Bool
 - step :: Mission -> World -> Thing -> World

data AssignedMission = AssignedMission {
    AM_owner: Thing,
    AM_briefing :: Mission,
    AM_plan :: Mission
}

MultipleChoiceMission
 - estimateOutcome = chooseBest missions
 - isComplete = any isComplete missions
 - step = step (chooseBest missions)

Beacon = { B_openMissions = [Mission], B_assignedMissions = [AssignedMission] }



-- keep your current mission if you got one
updateMission :: Thing -> Maybe Mission -> Mission
updateMission thing Nothing = selectMission thing
updateMission thing Just x = x


sims:
Mission: Cook dinner
outcomes: +8 dinner objects, -1 preppedMaterials

Mission: Prep dinner materials
outcomes: +1 preppedMaterials, -1 rawMaterials

Mission: Get dinner materials
outcomes: +1 rawMaterials, -20 simoleans


class Mission where

data CookDinner = CookDinner {
    CD_getMaterials = FindResource "preppedMaterials" 1
}

instance Mission CookDinner where
  outcomes 





class Ordinal t where
  lesser :: t -> t -> Bool
  greater :: t -> t -> Bool

instance Ordinal Int where
  lesser x y = x < y
  greater x y = x > y

